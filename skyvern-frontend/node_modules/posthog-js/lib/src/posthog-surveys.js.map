{"version":3,"file":"posthog-surveys.js","sourceRoot":"","sources":["../../src/posthog-surveys.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { SURVEYS } from './constants'\nimport { Survey, SurveyCallback, SurveyUrlMatchType } from './posthog-surveys-types'\nimport { isUrlMatchingRegex } from './utils/request-utils'\nimport { SurveyEventReceiver } from './utils/survey-event-receiver'\nimport { assignableWindow, document, window } from './utils/globals'\nimport { DecideResponse } from './types'\nimport { loadScript } from './utils'\nimport { logger } from './utils/logger'\nimport { isUndefined } from './utils/type-utils'\n\nexport const surveyUrlValidationMap: Record<SurveyUrlMatchType, (conditionsUrl: string) => boolean> = {\n    icontains: (conditionsUrl) =>\n        !!window && window.location.href.toLowerCase().indexOf(conditionsUrl.toLowerCase()) > -1,\n    regex: (conditionsUrl) => !!window && isUrlMatchingRegex(window.location.href, conditionsUrl),\n    exact: (conditionsUrl) => window?.location.href === conditionsUrl,\n}\n\nexport class PostHogSurveys {\n    instance: PostHog\n    private _decideServerResponse?: boolean\n    public _surveyEventReceiver: SurveyEventReceiver | null\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        // we set this to undefined here because we need the persistence storage for this type\n        // but that's not initialized until loadIfEnabled is called.\n        this._surveyEventReceiver = null\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        this._decideServerResponse = !!response['surveys']\n        this.loadIfEnabled()\n    }\n\n    loadIfEnabled() {\n        const surveysGenerator = assignableWindow?.extendPostHogWithSurveys\n\n        if (!this.instance.config.disable_surveys && this._decideServerResponse && !surveysGenerator) {\n            if (this._surveyEventReceiver == null) {\n                this._surveyEventReceiver = new SurveyEventReceiver(this.instance.persistence)\n            }\n            loadScript(this.instance.requestRouter.endpointFor('assets', '/static/surveys.js'), (err) => {\n                if (err) {\n                    return logger.error(`Could not load surveys script`, err)\n                }\n\n                assignableWindow.extendPostHogWithSurveys(this.instance)\n            })\n        }\n    }\n\n    getSurveys(callback: SurveyCallback, forceReload = false) {\n        // In case we manage to load the surveys script, but config says not to load surveys\n        // then we shouldn't return survey data\n        if (this.instance.config.disable_surveys) {\n            return callback([])\n        }\n\n        if (this._surveyEventReceiver == null) {\n            this._surveyEventReceiver = new SurveyEventReceiver(this.instance.persistence)\n        }\n\n        const existingSurveys = this.instance.get_property(SURVEYS)\n        if (!existingSurveys || forceReload) {\n            this.instance._send_request({\n                url: this.instance.requestRouter.endpointFor(\n                    'api',\n                    `/api/surveys/?token=${this.instance.config.token}`\n                ),\n                method: 'GET',\n                transport: 'XHR',\n                callback: (response) => {\n                    if (response.statusCode !== 200 || !response.json) {\n                        return callback([])\n                    }\n                    const surveys = response.json.surveys || []\n\n                    const eventBasedSurveys = surveys.filter(\n                        (survey: Survey) =>\n                            survey.conditions?.events &&\n                            survey.conditions?.events?.values &&\n                            survey.conditions?.events?.values?.length > 0\n                    )\n\n                    if (eventBasedSurveys.length > 0 && !isUndefined(this.instance._addCaptureHook)) {\n                        this._surveyEventReceiver?.register(eventBasedSurveys)\n                        const onEventName = (eventName: string) => {\n                            this._surveyEventReceiver?.on(eventName)\n                        }\n                        this.instance._addCaptureHook(onEventName)\n                    }\n\n                    this.instance.persistence?.register({ [SURVEYS]: surveys })\n                    return callback(surveys)\n                },\n            })\n        } else {\n            return callback(existingSurveys)\n        }\n    }\n\n    getActiveMatchingSurveys(callback: SurveyCallback, forceReload = false) {\n        this.getSurveys((surveys) => {\n            const activeSurveys = surveys.filter((survey) => {\n                return !!(survey.start_date && !survey.end_date)\n            })\n\n            const conditionMatchedSurveys = activeSurveys.filter((survey) => {\n                if (!survey.conditions) {\n                    return true\n                }\n\n                // use urlMatchType to validate url condition, fallback to contains for backwards compatibility\n                const urlCheck = survey.conditions?.url\n                    ? surveyUrlValidationMap[survey.conditions?.urlMatchType ?? 'icontains'](survey.conditions.url)\n                    : true\n                const selectorCheck = survey.conditions?.selector\n                    ? document?.querySelector(survey.conditions.selector)\n                    : true\n                return urlCheck && selectorCheck\n            })\n\n            // get all the surveys that have been activated so far with user actions.\n            const activatedSurveys: string[] | undefined = this._surveyEventReceiver?.getSurveys()\n            const targetingMatchedSurveys = conditionMatchedSurveys.filter((survey) => {\n                if (!survey.linked_flag_key && !survey.targeting_flag_key && !survey.internal_targeting_flag_key) {\n                    return true\n                }\n                const linkedFlagCheck = survey.linked_flag_key\n                    ? this.instance.featureFlags.isFeatureEnabled(survey.linked_flag_key)\n                    : true\n                const targetingFlagCheck = survey.targeting_flag_key\n                    ? this.instance.featureFlags.isFeatureEnabled(survey.targeting_flag_key)\n                    : true\n\n                const internalTargetingFlagCheck = survey.internal_targeting_flag_key\n                    ? this.instance.featureFlags.isFeatureEnabled(survey.internal_targeting_flag_key)\n                    : true\n\n                const hasEvents =\n                    survey.conditions?.events &&\n                    survey.conditions?.events?.values &&\n                    survey.conditions?.events?.values.length > 0\n                const eventBasedTargetingFlagCheck = hasEvents ? activatedSurveys?.includes(survey.id) : true\n                return (\n                    linkedFlagCheck && targetingFlagCheck && internalTargetingFlagCheck && eventBasedTargetingFlagCheck\n                )\n            })\n\n            return callback(targetingMatchedSurveys)\n        }, forceReload)\n    }\n}\n"]}